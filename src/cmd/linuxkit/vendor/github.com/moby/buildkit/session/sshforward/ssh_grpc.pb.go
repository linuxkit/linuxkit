// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.11.4
// source: github.com/moby/buildkit/session/sshforward/ssh.proto

package sshforward

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SSH_CheckAgent_FullMethodName   = "/moby.sshforward.v1.SSH/CheckAgent"
	SSH_ForwardAgent_FullMethodName = "/moby.sshforward.v1.SSH/ForwardAgent"
)

// SSHClient is the client API for SSH service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSHClient interface {
	CheckAgent(ctx context.Context, in *CheckAgentRequest, opts ...grpc.CallOption) (*CheckAgentResponse, error)
	ForwardAgent(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BytesMessage, BytesMessage], error)
}

type sSHClient struct {
	cc grpc.ClientConnInterface
}

func NewSSHClient(cc grpc.ClientConnInterface) SSHClient {
	return &sSHClient{cc}
}

func (c *sSHClient) CheckAgent(ctx context.Context, in *CheckAgentRequest, opts ...grpc.CallOption) (*CheckAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAgentResponse)
	err := c.cc.Invoke(ctx, SSH_CheckAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSHClient) ForwardAgent(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BytesMessage, BytesMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SSH_ServiceDesc.Streams[0], SSH_ForwardAgent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BytesMessage, BytesMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SSH_ForwardAgentClient = grpc.BidiStreamingClient[BytesMessage, BytesMessage]

// SSHServer is the server API for SSH service.
// All implementations should embed UnimplementedSSHServer
// for forward compatibility.
type SSHServer interface {
	CheckAgent(context.Context, *CheckAgentRequest) (*CheckAgentResponse, error)
	ForwardAgent(grpc.BidiStreamingServer[BytesMessage, BytesMessage]) error
}

// UnimplementedSSHServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSSHServer struct{}

func (UnimplementedSSHServer) CheckAgent(context.Context, *CheckAgentRequest) (*CheckAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAgent not implemented")
}
func (UnimplementedSSHServer) ForwardAgent(grpc.BidiStreamingServer[BytesMessage, BytesMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ForwardAgent not implemented")
}
func (UnimplementedSSHServer) testEmbeddedByValue() {}

// UnsafeSSHServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSHServer will
// result in compilation errors.
type UnsafeSSHServer interface {
	mustEmbedUnimplementedSSHServer()
}

func RegisterSSHServer(s grpc.ServiceRegistrar, srv SSHServer) {
	// If the following call pancis, it indicates UnimplementedSSHServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SSH_ServiceDesc, srv)
}

func _SSH_CheckAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSHServer).CheckAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSH_CheckAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSHServer).CheckAgent(ctx, req.(*CheckAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSH_ForwardAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SSHServer).ForwardAgent(&grpc.GenericServerStream[BytesMessage, BytesMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SSH_ForwardAgentServer = grpc.BidiStreamingServer[BytesMessage, BytesMessage]

// SSH_ServiceDesc is the grpc.ServiceDesc for SSH service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSH_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moby.sshforward.v1.SSH",
	HandlerType: (*SSHServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAgent",
			Handler:    _SSH_CheckAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ForwardAgent",
			Handler:       _SSH_ForwardAgent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/moby/buildkit/session/sshforward/ssh.proto",
}
