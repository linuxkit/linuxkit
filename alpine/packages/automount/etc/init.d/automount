#!/sbin/openrc-run

depend()
{
	need dev
}

do_fsck()
{
	/sbin/e2fsck -p "$1"
	EXIT_CODE=$?
	# exit code 1 is errors corrected
	[ "${EXIT_CODE}" -eq 1 ] && EXIT_CODE=0
	# exit code 2 or 3 means need to reboot
	[ "${EXIT_CODE}" -eq 2 -o "${EXIT_CODE}" -eq 3 ] && /sbin/reboot
	# exit code 4 or over is fatal
	[ "${EXIT_CODE}" -ge 4 ] && printf "Filesystem unrecoverably corrupted, will reformat\n"
	return "${EXIT_CODE}"
}

do_mkfs()
{
	diskdev="$1"

	# new disks does not have an DOS signature in sector 0
	# this makes sfdisk complain. We can workaround this by letting
	# fdisk create that DOS signature, by just do a "w", a write.
	# http://bugs.alpinelinux.org/issues/show/145
	echo "w" | fdisk $diskdev >/dev/null

	# format one large partition, offset 1M
	printf "1M,,83\n" | sfdisk --quiet $diskdev

	# update status
	blockdev --rereadpt $diskdev 2> /dev/null
	mdev -s

	mkfs.ext4 ${diskdev}1

	mount ${diskdev}1 /var
}

do_swapfile()
{
	SWAP=/var/spool/swap
	if [ "$(mobyplatform)" = "mac" ] || [ "$(mobyplatform)" = "windows" ] && [ ! -f $SWAP ]
	then
		mkdir -p "$(basnename $SWAP)"
		dd if=/dev/zero of=$SWAP bs=1k count=4090876
		chmod 600 $SWAP
		mkswap $SWAP
		swapon $SWAP
	fi
}

start()
{
	ebegin "Configuring host block device"

	# We are being specific with Azure for now.  Otherwise the subshell
	# below will reference /dev/sdb, which is Azure's "local resource disk"
	# (see
	# https://blogs.msdn.microsoft.com/mast/2013/12/06/understanding-the-temporary-drive-on-windows-azure-virtual-machines/).
	#
	# Since attempting to format swap on that disk will cause Azure VHD
	# validation to fail, we default to using /dev/sda.  requirements
	# including not allowing swap partitions.
	#
	# IMPORTANT: If this, or the root device (/dev/sda1) changes in the
	# syslinux / bootloader config for Azure, they will need to be updated
	# in parallel.
	if [ "$(mobyplatform)" = "azure" ]
	then
		DEV="sda"
	else
		DEV="$(find /dev -maxdepth 1 -type b ! -name 'loop*' | grep -v '[0-9]$' | sed 's@.*/dev/@@' | sort | head -1 )"
	fi

	[ -z "${DEV}" ] && exit 1

	DRIVE="/dev/${DEV}"

	if fdisk -l "${DRIVE}" | grep -q "doesn't contain a valid partition table"
	then
		do_mkfs "${DRIVE}"
	else
		DATA=$(fdisk -l "${DRIVE}" | grep 'Linux$' | head -1 | awk '{print $1}')
		if [ -z "$DATA" ]
		then
			do_mkfs "${DRIVE}"
		else
			( do_fsck "${DATA}" && mount "${DATA}" /var ) || do_mkfs "${DRIVE}"
		fi
	fi

	SWAP=$(fdisk -l "${DRIVE}" | grep 'Linux swap' | head -1 | awk '{print $1}')
	[ -z "${SWAP}" ] && do_swapfile || swapon "${SWAP}"

	# boot2docker compat, has /var and /tmp on partition
	[ -d /var/var/lib/boot2docker/ ] && mount --bind /var/var /var


	# can remove when we run before bootmisc
	[ -L /var/run ] || ln -s /run /var/run
	[ -L /var/run ] || ln -s /run/lock /var/lock
	[ -d /var/log ] || mkdir -m 755 /var/log
	[ -d /var/empty ] || mkdir -m 755 /var/empty
	[ -d /var/spool ] || mkdir -m 755 /var/spool
	[ -d /var/tmp ] || mkdir -m 1777 /var/tmp

	mount | grep -q "${DEV}. on /var type"

	eend $? "Failed to mount block device"
}
