// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/docker/infrakit/spi/flavor (interfaces: Plugin)

package instance

import (
	json "encoding/json"
	types "github.com/docker/infrakit/plugin/group/types"
	flavor "github.com/docker/infrakit/spi/flavor"
	instance "github.com/docker/infrakit/spi/instance"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *_MockPluginRecorder
}

// Recorder for MockPlugin (not exported)
type _MockPluginRecorder struct {
	mock *MockPlugin
}

func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &_MockPluginRecorder{mock}
	return mock
}

func (_m *MockPlugin) EXPECT() *_MockPluginRecorder {
	return _m.recorder
}

func (_m *MockPlugin) Healthy(_param0 json.RawMessage, _param1 instance.Description) (flavor.Health, error) {
	ret := _m.ctrl.Call(_m, "Healthy", _param0, _param1)
	ret0, _ := ret[0].(flavor.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPluginRecorder) Healthy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Healthy", arg0, arg1)
}

func (_m *MockPlugin) Prepare(_param0 json.RawMessage, _param1 instance.Spec, _param2 types.AllocationMethod) (instance.Spec, error) {
	ret := _m.ctrl.Call(_m, "Prepare", _param0, _param1, _param2)
	ret0, _ := ret[0].(instance.Spec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPluginRecorder) Prepare(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Prepare", arg0, arg1, arg2)
}

func (_m *MockPlugin) Validate(_param0 json.RawMessage, _param1 types.AllocationMethod) error {
	ret := _m.ctrl.Call(_m, "Validate", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPluginRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate", arg0, arg1)
}
